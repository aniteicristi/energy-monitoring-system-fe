/**
 * @fileoverview gRPC-Web generated client stub for messages
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: message.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as message_pb from './message_pb';


export class GrpcMessagingServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorpostMessage = new grpcWeb.MethodDescriptor(
    '/messages.GrpcMessagingService/postMessage',
    grpcWeb.MethodType.UNARY,
    message_pb.TextMessage,
    message_pb.Response,
    (request: message_pb.TextMessage) => {
      return request.serializeBinary();
    },
    message_pb.Response.deserializeBinary
  );

  postMessage(
    request: message_pb.TextMessage,
    metadata: grpcWeb.Metadata | null): Promise<message_pb.Response>;

  postMessage(
    request: message_pb.TextMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: message_pb.Response) => void): grpcWeb.ClientReadableStream<message_pb.Response>;

  postMessage(
    request: message_pb.TextMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: message_pb.Response) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messages.GrpcMessagingService/postMessage',
        request,
        metadata || {},
        this.methodDescriptorpostMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messages.GrpcMessagingService/postMessage',
    request,
    metadata || {},
    this.methodDescriptorpostMessage);
  }

  methodDescriptorgetMessages = new grpcWeb.MethodDescriptor(
    '/messages.GrpcMessagingService/getMessages',
    grpcWeb.MethodType.UNARY,
    message_pb.Client,
    message_pb.Response,
    (request: message_pb.Client) => {
      return request.serializeBinary();
    },
    message_pb.Response.deserializeBinary
  );

  getMessages(
    request: message_pb.Client,
    metadata: grpcWeb.Metadata | null): Promise<message_pb.Response>;

  getMessages(
    request: message_pb.Client,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: message_pb.Response) => void): grpcWeb.ClientReadableStream<message_pb.Response>;

  getMessages(
    request: message_pb.Client,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: message_pb.Response) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messages.GrpcMessagingService/getMessages',
        request,
        metadata || {},
        this.methodDescriptorgetMessages,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messages.GrpcMessagingService/getMessages',
    request,
    metadata || {},
    this.methodDescriptorgetMessages);
  }

  methodDescriptorgetUpdateStream = new grpcWeb.MethodDescriptor(
    '/messages.GrpcMessagingService/getUpdateStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    message_pb.Client,
    message_pb.TextMessage,
    (request: message_pb.Client) => {
      return request.serializeBinary();
    },
    message_pb.TextMessage.deserializeBinary
  );

  getUpdateStream(
    request: message_pb.Client,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<message_pb.TextMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/messages.GrpcMessagingService/getUpdateStream',
      request,
      metadata || {},
      this.methodDescriptorgetUpdateStream);
  }

}

